#%RAML 1.0
title: G8OS Stateless GRID
version: v0.1.0
mediaType:  application/json

types:
  !include types.raml


/node:
  get:
    description: List Nodes
    displayName: ListNodes
    responses:
      200:
        body:
          application/json:
            type: Node[]
  /{nodeid}:
    get:
      description: Get detailed information of a node
      displayName: GetNode
      responses:
        200:
          body:
            application/json:
              type: Node
    /job:
      description: Jobs for this Node
      get:
        displayName: ListNodeJobs
        description: List running jobs
        responses:
          200:
            body:
              application/json:
                type: JobListItem[]
      delete:
        displayName: KillAllNodeJobs
        description: Kills all running jobs
        responses:
          204:
            description: Jobs killed successfully
      /{jobid}:
        get:
          displayName: GetNodeJob
          description: Get the details of a submitted job
          responses:
            200:
              body:
                application/json:
                  type: JobResult
        delete:
          displayName: KillNodeJob
          description: Kills the job
          responses:
            204:
              description: Jobs killed successfully
    /ping:
      post:
        displayName: PingNode
        description: Ping this node
        responses:
          200:
            body:
              application/json:
                description: Returns true when the g8os responds
                type: boolean
    /state:
      get:
        displayName: GetNodeState
        description: The aggregated consumption of node + all processes (cpu, memory, etc...)
        responses:
          200:
            body:
              application/json:
                type:
                  CoreStateResult
    /reboot:
      post:
        displayName: RebootNode
        description: Immediately reboot the machine.
        responses:
          204:
            description: Machine reboot signal sent successfully
    /cpu:
      get:
        displayName: GetCPUInfo
        description: Get detailed information of all CPUs in the node
        responses:
          200:
            body:
              application/json:
                type: CPUInfo[]
    /disk:
      get:
        displayName: GetDiskInfo
        description: Get detailed information of all the disks in the node
        responses:
          200:
            body:
              application/json:
                type: DiskInfo[]
    /mem:
      get:
        displayName: GetMemInfo
        description: Get detailed information about the memory in the node
        responses:
          200:
            body:
              application/json:
                type: MemInfo
    /nic:
      get:
        displayName: GetNicInfo
        description: Get detailed information about the network interfaces in the node
        responses:
          200:
            body:
              application/json:
                type: NicInfo[]
    /info:
      get:
        displayName: GetNodeOSInfo
        description: Get detailed information of the os of the node
        responses:
          200:
            body:
              application/json:
                type: OSInfo
    /process:
       get:
         displayName: ListNodeProcesses
         description: Get Processes
         responses:
           200:
             body:
               application/json:
                 type: Process[]
       /{proccessid}:
         get:
           displayName: GetNodeProcess
           description: Get process details
           responses:
             200:
               body:
                 application/json:
                   type: Process
         delete:
           displayName: KillNodeProcess
           description: Kill Process
           responses:
             204:
               description: Job killed successfully
    /bridge:
      post:
        displayName: CreateBridge
        description: Creates a new bridge
        body:
          application/json:
            type: BridgeCreate
        responses:
          201:
            description: Bridge created successfully
            headers:
              Location:
                description: Url to the created bridge resource
      get:
        displayName: ListBridges
        description: List bridges
        responses:
          200:
            body:
              application/json:
                type: Bridge[]
      /{bridgeid}:
        get:
          displayName: GetBridge
          description: Get bridge details
          responses:
            200:
              body:
                application/json:
                  type: Bridge
        delete:
          displayName: DeleteBridge
          description: Remove bridge
          responses:
            204:
              description: Bridge removed successfully
    /storagepool:
      get:
        displayName: GetStoragePools
        description: List storage pools present in the node
        responses:
          200:
            body:
              application/json:
                type: StoragePoolListItem[]
      post:
        description: Create a new storage pool
        body:
          application/json:
            type: StoragePoolCreate
        responses:
          201:
            headers:
              Location:
                description: Url to the newly created storagepool.
      /{storagepoolname}:
        get:
          description: Get detailed information of this storage pool
          responses:
            200:
              body:
                application/json:
                  type: StoragePool
        delete:
          description: Delete the storage pool
          responses:
            204:
              description: Storage pool deleted successfully
        /device:
          get:
            description: Lists the devices in the storage pool
            responses:
              200:
                body:
                  application/json:
                    description: List of devices of the storage pool
                    example: ['/dev/sda', '/dev/sdb']
                    type: string[]
          post:
            description: Add extra devices to this storage pool
            body:
              application/json:
                description: List of devices to add to the storage pool
                example: ['/dev/sdc', '/dev/sdd']
            responses:
              204:
                description: Devices added successfully
          /{deviceid}:
            delete:
              description: Removes the device from the storagepool
              responses:
                202:
                  headers:
                    Location:
                      description: Url to the job object handling this request
        /filesystem:
          get:
            description: List filesystems
            responses:
              200:
                body:
                  application/json:
                    description: List of filesystems
                    type: string[]
          post:
            description: Create a new filesystem
            body:
              application/json:
                type: FilesystemCreate
            responses:
              201:
                headers:
                  Location:
                    description: Url towards the newly created filesystem resource
          /{filesystemname}:
            get:
              description: Get detailed filesystem information
              responses:
                200:
                  body:
                    application/json:
                      type: Filesystem
            delete:
              description: Delete filesystem
              responses:
                204:
                  description: Filesystem deleted successfully
            /snapshot:
              get:
                description: List snapshots of this filesystem
                responses:
                  200:
                    body:
                      application/json:
                        description: List of snapshots
                        type: string[]
              post:
                description: Create a new readonly filesystem of the current state of the volume
                body:
                  application/json:
                    description: |
                      Unique identifier for the snapshot
                      Permitted characters: a-z,-
                      Max length: 50 characters.
                    type: string
                responses:
                  201:
                    description: Snapshot created successfully
                    headers:
                      Location:
                        description: Url to the created snapshot resource
              /{snapshotname}:
                get:
                  description: Get detailed information on the snapshot
                  responses:
                    200:
                      body:
                        application/json:
                          type: Snapshot
                delete:
                  description: Delete snapshot
                  responses:
                    204:
                      description: Snapshot deleted successfully
                /rollback:
                  post:
                    description: Rollback the filesystem to the state at the moment the snapshot was taken
                    responses:
                      204:
                        description: Snapshot rollbacked successfully
    /zerotier:
      get:
        displayName: ListZerotier
        description: List running Zerotier networks
        responses:
          200:
            body:
              application/json:
                type: ZerotierListItem[]
      /{zerotierid}:
        get:
          displayName: GetZerotier
          description: Get Zerotier network details
          responses:
            200:
              body:
                application/json:
                  type: Zerotier
        post:
          displayName: JoinZerotier
          description: Join Zerotier network
          responses:
            201:
              description: Zerotier network joined successfully
              headers:
                Location:
                  description: Url to the created zerotier network resource
        delete:
          displayName: ExitZerotier
          description: Exit the Zerotier network
          responses:
            204:
              description: Zerotier network exited successfully
    /container:
      get:
        displayName: ListContainers
        description: List running Containers
        responses:
          200:
            body:
              application/json:
                type: ContainerListItem[]
      post:
        displayName: CreateContainer
        description: Create a new Container
        body:
          application/json:
            type: Container
        responses:
          201:
            description: Container created successfully
            headers:
              Location:
                description: Url to the created container resource
      /{containerid}:
        delete:
          displayName: DeleteContainer
          description: Delete Container instance
          responses:
            204:
              description: Container deleted successfully
        get:
          displayName: GetContainer
          description: Get Container
          responses:
            200:
              body:
                application/json:
                  type: Container
        /filesystem:
          post:
            description: Upload file to container
            displayName: FileUpload
            queryString:
              properties:
                path: string
            body:
              multipart/form-data:
                properties:
                  file:
                    type: file
                    required: true
                    description: the file to upload
            responses:
              204:
                description: File uploaded successfully
          get:
            description: Download file from container
            displayName: FileDownload
            queryString:
              properties:
                path: string
            responses:
              200:
                body:
                  application/octet-stream:
          delete:
            description: Delete file from container
            displayName: FileDelete
            body:
              application/json:
                type: DeleteFile
            responses:
              204:
                description: File deleted successfully
        /job:
          get:
            displayName: ListContainerJobs
            description: List running jobs on the container
            responses:
              200:
                body:
                  application/json:
                    type: JobListItem[]
          delete:
            displayName: KillAllContainerJobs
            description: Kills all running jobs on the container
            responses:
              204:
                description: Jobs killed successfully
          /{jobid}:
            get:
              displayName: GetContainerJob
              description: Get details of a submitted job on the container
              responses:
                200:
                  body:
                    application/json:
                      type: JobResult
            delete:
              displayName: KillContainerJob
              description: Kills the job
              responses:
                204:
                  description: Job killed successfully
        /ping:
          post:
            displayName: PingContainer
            description: Ping this container
            responses:
              200:
                body:
                  application/json:
                    type: boolean
        /state:
          get:
            displayName: GetContainerState
            description: The aggregated consumption of container + all processes (cpu, memory, etc...)
            responses:
              200:
                body:
                  application/json:
                    type:
                      CoreStateResult
        /info:
          get:
            displayName: GetContainerOSInfo
            description: Get detailed information of the container os
            responses:
              200:
                body:
                  application/json:
                    type: OSInfo
        /process:
           get:
             displayName: ListContainerProcesses
             description: Get running processes in this container
             responses:
               200:
                 body:
                   application/json:
                     type: Process[]
           post:
             displayName: StartContainerProcess
             description: Start a new process in this container
             body:
               application/json:
                 type: CoreSystem
             responses:
               202:
                 headers:
                   Location:
                     description: Url to the job object handling this request
           /{proccessid}:
             get:
               displayName: GetContainerProcess
               description: Get process details
               responses:
                 200:
                   body:
                     application/json:
                       type: Process
             delete:
               displayName: KillContainerProcess
               description: Kill Process
               responses:
                 204:
                   description: Process killed successfully
    /vm:
      get:
        description: List running VMs
        displayName: ListVMs
        responses:
          200:
            body:
              application/json:
                type: VMListItem[]
      post:
        description: Starts the VM
        displayName: StartVM
        body:
          application/json:
            type: VM
        responses:
          200:
            body:
              application/json:
                description: Runtime id of the virtual machine (process id)
                type: integer
      /{vmpid}:
        delete:
          displayName: StopVM
          description: Stops the VM
          responses:
            204:
              description: VM stopped successfully
        get:
          displayName: GetVM
          description: Get detailed virtual machine object
          responses:
            200:
              body:
                application/json:
                  type: VM
        /info:
          get:
            description: Get statistical information about the virtual machine.
            responses:
              200:
                body:
                  application/json:
                    type: VMInfo
/objstor:
  description: Creates and get informations about object stor
  post:
    displayName: DeployNewCluster
    description: Deploy New Cluster
    body:
      application/json:
        type: ClusterProperties
    responses:
      202:
        description: Deployment started
        body:
          application/json:
            type: object
            properties:
              label: string
  get:
    displayName: ListAllClusters
    description: List all running clusters
    responses:
      200:
        body:
          application/json:
            type: string[]
  /{label}:
    get:
      displayName: GetClusterInfo
      description: Get full Information about specific cluster
      responses:
        200:
          body:
            application/json:
              type: Objstor
    delete:
      displayName: KillCluster
      description: Kill cluster
      responses:
        204:
          description: Cluster destroyed
/disk:
  description: Retrieve informations about physical disks attached to the nodes
  get:
    displayName: ListAllDisks
    description: List all physical disks used
    responses:
      200:
        body:
          application/json:
            type: DiskInfo[]
  /{diskid}:
    get:
      displayName: GetDiskInfo
      description: Get full Information about a disk
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                info: DiskInfo
                ext: DiskExtInfo
