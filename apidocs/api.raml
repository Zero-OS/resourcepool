#%RAML 1.0
title: G8OS Stateless GRID
version: v0.2.0
mediaType:  application/json

annotationTypes:
  AYSBased:
    type: nil
    allowedTargets: [Resource, Method]
    description: Mark the call as executed by AYS in the backend
  DirectAccess:
    type: nil
    allowedTargets: [Resource, Method]
    description: Mark the call as going directly to the G8OS node

types:
  
  #%RAML 1.0 DataType
  
  # Grid Stateless API types
  Node:
    type: object
    description: Node node in the g8os grid
    properties:
      id: string
      status:
        enum: [running, halted]
        description: Status of the node
      hostname: string
  
  CPUInfo:
    type: object
    description: Information about physical CPUs
    properties:
      cacheSize:
        type: number
        format: int32
      cores:
        type: number
        format: int32
      family: string
      flags: string[]
      mhz:
        type: number
        format: float
  
  MemInfo:
    type: object
    description: Information about memory
    properties:
      active: integer
      available: integer
      buffers: integer
      cached: integer
      free: integer
      inactive: integer
      total: integer
      used: integer
      usedPercent: number
      wired: integer
  
  OSInfo:
    type: object
    description: Information on the operating system
    properties:
      bootTime: integer
      hostname: string
      os: string
      platform: string
      platformFamily: string
      platformVersion: string
      procs: integer
      uptime: integer
      virtualizationRole: string
      virtualizationSystem: string
  
  NicInfo:
    type: object
    description: Information about network interface
    properties:
      addrs:
        type: string[]
        description: List of IP Addresses
      flags: string[]
      hardwareaddr:
        type: string
        description: Hardware address of network interface
      mtu: integer
      name: string
  
  DiskInfo:
    type: object
    description: Information about DiskInfo
    properties:
      device:
        type: string
        description: Name of the device
      fstype:
        type: string
        description: Type of filesystem
      mountpoint:
        type: string
        description: Mountpoint of the device
      opts:
        type: string
        description: Mount options
      size:
        type: integer
        description: Size of the disk in GiB
      type:
        enum: [ssd, nvme, hdd, archive]
        description: Kind of disk
  
  BridgeCreate:
    type: object
    description: Arguments for a bridge.create job
    properties:
      name:
        description: Name for the bridge to be created
        type: string
      hwaddr:
        description: Macaddress for the bridge to be created. If none, a random macaddress will be assigned
        type: string
        required: false
      networkMode:
        description: Networking mode
        enum: ['none', 'static', 'dnsmasq']
      nat:
        description: If true, SNAT will be enabled on this bridge.
        type: boolean
      settings:
        type: object
        description: |
          Networking settings, depending on the selected mode.
            none:
              no settings, bridge won't get any ip settings
            static:
              settings={'cidr': 'ip/net'}
              bridge will get assigned the given IP address
            dnsmasq:
              settings={'cidr': 'ip/net', 'start': 'ip', 'end': 'ip'}
              bridge will get assigned the ip in cidr
              and each running container that is attached to this IP will get
              IP from the start/end range. Netmask of the range is the netmask
              part of the provided cidr.
              if nat is true, SNAT rules will be automatically added in the firewall.
        properties:
          cidr: string
          start: string
          end: string
  
  Job:
    type: object
    description: Job that is be executed in the Node/Container. More information can be found here https://github.com/g8os/node/blob/master/docs/commands.md
    properties:
      id:
        description: A unique id for the job with which later on results can be retrieved. If not supplied an id will be generated.
        type: string
      queue:
        description: Name of the queue in which this job was be enqued.
        type: string
      tags:
        description: Metadata that is be submitted together with the job and is returned with the result.
        type: string
      statsInterval:
        description: Stats gathering interval.
        default: 0
        type: integer
      maxTime:
        description: Max run time of the job, if exceeded job will be killed
        default: 0
        type: integer
      maxRestart:
        description: Max number of retries to start the job if failed before giving up.
        default: 0
        type: integer
      recurringPeriod:
        description: If provided job is executed every X seconds.
        default: 0
        type: integer
      logLevels:
        description: Log levels to store locally and not discard.
        type: integer[]
        default: [0]
  
  WriteFile:
    type: object
    displayName: Writes a file in the targetted system
    properties:
      path:
        displayName: Path on the target system where the file should be written
        type: string
      contents:
        displayName: Contents of the file that should be written
        type: string
  
  DeleteFile:
    type: object
    displayName: Removes a file in the targetted system
    properties:
      path:
        displayName: Path on the target system where the file should be written
        type: string
  
  Process:
    type: object
    properties:
      cmd: Job
      pid: integer
      name: string
      cpu: number
      debug: string
      rss: number
      swap: number
      vms: number
  
  ProcessSignal:
    type: object
    properties:
      signal:
        type: integer
        description: Number of the signal to send to the process.
        default: 15
        minimum: 1
  
  VDiskLink:
    type: object
    description: Definition of a virtual disk
    properties:
      maxIOps:
        description: Maximum amount of iops the virtual disk should deliver
        type: integer
      url:
        description: File path to the NBD unix domain socket
        type: string
      storageclusterid:
        type: string
        description: Id of the storage cluster of the volume
      volumeid:
        type: string
        description: Id of the volume
  
  
  VMListItem:
    type: object
    description: Virtual machine list item
    properties:
      id:
        description: Unique id of the virtual machine
        type: integer
      name: string
      status:
        enum: [running, halted, paused]
        description: Status of the VM
  
  VM:
    type: object
    properties:
      id:
        description: Unique identifier of the vm
        type: string
      name: string
      status:
        enum: [running, halted, paused, halting, migrating]
        description: Status of the VM
      memory:
        description: Amount of memory in MiB
        type: integer
      cpu:
        description: Number of virtual CUPs
        type: integer
      nic:
        description: |
          List of nic specifications.
          Possible formats:
          - "VxLAN:<<VxLAN id>>"
            eg "VxLAN:200" Attaches the nic to VxLan 200
          - "Zerotier:<<Zerotier network id>>"
            eg "Zerotier:fsjyhgu76fsd87ydzf86t7dfygis" Attaches the nic to Zerotier network fsjyhgu76fsd87ydzf86t7dfygis
        type: string[]
      disk:
        description: List of virtual disks
        type: VDiskLink[]
  
  VMCreate:
    type: object
    properties:
      name: string
      memory:
        description: Amount of memory in MiB
        type: integer
      cpu:
        description: Number of virtual CUPs
        type: integer
      nic:
        description: |
          List of nic specifications.
          Possible formats:
          - "VxLAN:<<VxLAN id>>"
            eg "VxLAN:200" Attaches the nic to VxLan 200
          - "Zerotier:<<Zerotier network id>>"
            eg "Zerotier:fsjyhgu76fsd87ydzf86t7dfygis" Attaches the nic to Zerotier network fsjyhgu76fsd87ydzf86t7dfygis
        type: string[]
      disk:
        description: List of virtual disks
        type: VDiskLink[]
      userCloudInit:
        description: Userlevel cloudinit configuration
        type: object
      systemCloudInit:
        description: Systemlevel cloudinit configuration
        type: object
  
  Bridge:
    type: object
    properties:
      name:
        description: Name of the bridge
        type: string
      config:
        description: |
          '' or 'none':
            no IP is gonna be set on the link
          'dhcp':
            Run `udhcpc` on the container link, of course this will
            only work if the `bridge` is created with `dnsmasq` networking
          'CIDR':
            Assign static IP to the link
        type: string
      status:
        enum: [up, down]
        description: Status of the bridge
  
  ContainerListItem:
    type: object
    properties:
      id:
        description: Unique identifier
        type: string
      hostname:
        description: Hostname for the Container
        type: string
      flist:
        type: string
        description: Url to the root filesystem flist
      status:
        enum: [running, halted]
        description: Status of the container
  
  Container:
    type: object
    properties:
      id:
        description: identifier
        type: string
      status:
        enum: [running, halted]
        description: Status of the container
      hostname:
        description: Hostname for the Container
        type: string
      flist:
        type: string
        description: Url to the root filesystem flist
      initprocesses:
        type: CoreSystem[]
        description: Definition of the processes to start in the container
      filesystems:
        description: |
          List of filesystems that will be exposed to the container
          format: <<storagepool>>:<<filesystem>>
          filesystems are mounted in the container filesystem as follows:
          /fs/<<storagepool>>/<<filesystem>>
        example: ['pool1:fs1', 'pool2:fs2']
        type: string[]
      zerotier:
        description: Zerotier network id
        type: string
        required: false
      bridges:
        type: Bridge[]
        description: Bridge mapping
      hostNetworking:
        type: boolean
        description: Make host networking available to the guest. If true means that the container will be able participate in the networks available in the host operating system.
      ports:
        type: string[]
        description: |
          List of node to container post mappings.
        example: ['10022:22', '8080:80']
  
  JobListItem:
    type: object
    description: Result object of a job
    properties:
      id:
        description: The unique identifier for the job
        type: string
      startTime:
        description: Epoch timestamp when the job was started
        type: number
        format: int64
  
  JobResult:
    type: object
    description: Result object of a job
    properties:
      id:
        description: The unique identifier for the job
        type: string
      name:
        description: The kind of job to which this result belongs to.
        enum: ['core.ping', 'core.system', 'core.kill', 'core.killall',
               'core.state', 'core.reboot', 'info.cpu', 'info.disk',
               'info.mem', 'info.nic', 'info.os', 'container.create',
               'container.list', 'container.dispatch', 'container.terminate',
               'bridge.create', 'bridge.list', 'bridge.delete',
               'disk.list', 'disk.mktable', 'disk.mkpart', 'disk.rmpart',
               'disk.mount', 'disk.umount', 'btrfs.create', 'btrfs.list',
               'btrfs.subvol_create', 'btrfs.subvol_list', 'btrfs.subvol_delete']
      level:
        description: 20 means that the data is json serialized object
        type: integer
      startTime:
        description: Epoch timestamp when the job was started
        type: number
        format: int64
      stdout:
        type: string
        description: Stdout of process/job
      stderr:
        type: string
        description: Stderr of process/job
      state:
        description: Status of the job
        enum: ['unknown_cmd', 'error', 'success', 'killed', 'timeout', 'duplicate_id', 'running']
      data:
        description: The result of executing the job
        type: string
  
  CoreStateResult:
    type: object
    description: Result of a core.state command
    properties:
      cpu:
        description: percentage cpu used in a node
        type: number
        format: float
      rss:
        type: number
        format: int64
      vms:
        type: number
        format: int64
      swap:
        type: number
        format: int64
  
  ZerotierRoute:
    type: object
    description: Zerotier route
    properties:
      flags: integer
      metric: integer
      target: string
      via: string
  
  ZerotierListItem:
    type: object
    description: Zerotier details
    properties:
      name: string
      nwid: string
      status: string
      type:
        enum: ['public', 'private']
  
  ZerotierJoin:
    type: object
    description: Arguments to join a Zerotier network
    properties:
      nwid: string
  
  Zerotier:
    type: object
    description: Zerotier details
    properties:
      allowDefault: boolean
      allowGlobal: boolean
      allowManaged: boolean
      assignedAddresses: string[]
      bridge: boolean
      broadcastEnabled: boolean
      dhcp: boolean
      mac: string
      mtu: integer
      name: string
      netconfRevision: integer
      nwid: string
      portDeviceName: string
      portError: integer
      routes: ZerotierRoute[]
      status: string
      type:
        enum: ['public', 'private']
  
  CoreSystem:
    type: object
    description: Arguments for a core.system command
    properties:
      name:
        description: Name of the executable that needs to be run
        type: string
      pwd:
        description: Directory in which the process needs to be started
        type: string
        required: false
      args:
        description: List of commandline arguments
        type: string[]
        required: false
      environment:
        description: |
          Environment variables for the process.
        example: ['PATH=/usr/bin/local', 'MYVAR=https://gig.tech']
        type: string[]
        required: false
      stdin:
        description: Data that needs to be passed into the stdin of the started process
        type: string
        required: false
  
  StoragePoolListItem:
    type: object
    description: A combination of block devices forming 1 logical storage unit.
    properties:
      name:
        description: A unique identifier for the storagepool
        type: string
      capacity:
        description: The amount of remaining free capacity left in the storagepool
      status:
        enum: [healthy, degraded, error]
        description: Status of the storage pool
  
  StoragePool:
    type: object
    description: A combination of block devices forming 1 logical storage unit.
    properties:
      name:
        description: |
          A unique identifier for the storagepool
          Permitted characters: a-z,-
        type: string
      status:
        enum: [healthy, degraded, error]
        description: Status of the storage pool
      totalCapacity:
        description: The amount of storage this storagepool can hold in total in GiB
        type: integer
      capacity:
        description: The amount of remaining free capacity left in the storagepool in GiB
        type: integer
      metadataProfile:
        description: Redundancy level of the storage pool meta data
        enum: ['raid0', 'raid1', 'raid5', 'raid6', 'raid10', 'dup', 'single']
      dataProfile:
        description: Redundancy level of the storage pool data
        enum: ['raid0', 'raid1', 'raid5', 'raid6', 'raid10', 'dup', 'single']
      mountpoint:
        description: |
          Location where the storage pool is mounted on the node's filesystem
          The location where the storage pool is mounted cannot be freely chosen.
          Pools are mounted as follows:
          /storage/<<pool>>
        type: string
  
  StoragePoolCreate:
    type: object
    description: Arguments to create a new storage pools
    properties:
      name:
        description: A unique identifier for the storagepool
        type: string
      metadataProfile:
        description: Redundancy level of the storage pool meta data
        enum: ['raid0', 'raid1', 'raid5', 'raid6', 'raid10', 'dup', 'single']
      dataProfile:
        description: Redundancy level of the storage pool data
        enum: ['raid0', 'raid1', 'raid5', 'raid6', 'raid10', 'dup', 'single']
      devices:
        description: List of devices to add to the storage pool
        example: ['/dev/sda', '/dev/sdb']
        type: string[]
  
  StoragePoolDevice:
    type: object
    description:
    properties:
      uuid:
        type: string
        description: UUID of the device
      status:
        enum: [healthy, removing]
        description: Status of the storage pool device
  
  
  Filesystem:
    type: object
    description: A filesystem living in a storage pool
    properties:
      name:
        description: |
          Unique identifier for the filesystem
        type: string
      parent:
        description: Name of the parent filesystem
        type: string
      sizeOnDisk:
        description: Amount of MiB of storage used by the filesystem
        type: integer
      readOnly:
        description: Determines wether changes can be written to the filesystem
        type: boolean
      quota:
        description: Amount of MiB that can be written to the filesystem. 0 means no quota is set.
        type: integer
      mountpoint:
        description: |
          Location where the filesystem is mounted on the node's filesystem
          The location where the filesystem is mounted cannot be freely chosen.
          filesystems are mounted as follows:
          /filesystems/<<filesystem>>
  
  FilesystemCreate:
    type: object
    description: Arguments to create a new filesystem
    properties:
      name:
        description: |
          Unique identifier for the filesystem
          Permitted characters: a-z,-
          Max length: 50 characters.
        type: string
      quota:
        description: Amount of MiB that can be written to the filesystem. 0 means no quota is set.
        type: integer
  
  Snapshot:
    type: object
    description: Read only copy of the state of the filesystem at a certain time
    properties:
      name:
        description: Unique name for the snapshot
        type: string
      sizeOnDisk:
        description: The amount of space on disk used by this snapshot in MiB
        type: integer
      timestamp:
        description:
          Epoch timestamp (seconds sinds 01/01/1970) when the snapshot was created
        type: integer
  
  VMDiskInfo:
    type: object
    properties:
      readIops:
        description: Average number of io read operations per second over the last 5 minutes
        type: integer
      writeIops:
        description: Average number of io write operations per second over the last 5 minutes
        type: integer
      readThroughput:
        description: Average amount of MiB's read per second over the last 5 minutes
        type: integer
      writeThroughput:
        description: Average amount of MiB's written per second over the last 5 minutes
        type: integer
  
  VMNetInfo:
    type: object
    properties:
      receivedPackets:
        description: Average number of packets received per second over the last 5 minutes
        type: integer
      transmittedPackets:
        description: Average number of packets sent per second over the last 5 minutes
        type: integer
      receivedThroughput:
        description: Average amount of MiB's received per second over the last 5 minutes
        type: integer
      transmittedThroughput:
        description: Average amount of MiB's transmitted per second over the last 5 minutes
        type: integer
  
  VMInfo:
    type: object
    description: Statistical information about a vm
    properties:
      disk: VMDiskInfo[]
      net: VMNetInfo[]
      cpu:
        description: Average number of cpu utilisation in cpu seconds / second over the last 5 minutes per vcpu
        type: number[]
  
  VMMigrate:
    properties:
      nodeid:
        description: Node identifier to which this vm needs to be migrated
        type: string
  
  # ObjtStor types
  StorageServer:
    properties:
      id:
        type: integer
        description: unique id for this storage server
      ip: string
      port: integer
      container:
        type: string
        description: URL to the container resource running this server
      status:
        type: string
        enum: [ready, error]
  
  ClusterCreate:
    properties:
      label: string
      servers:
        type: integer
        description: Number of storage server to deploy in this cluster
      driveType:
        type: string
        enum: [nvme, ssd, hdd, archive]
      slaveNodes:
        type: boolean
        description: Do we need to have slave backup nodes or no
      nodes:
        type: string[]
        description: List of node ID on which we can deploy storage server
    example:
      label: cluster1
      servers: 256
      driveType: ssd
      slaveNodes: false
      nodes:
         - node1
         - node2
  
  Cluster:
    properties:
      label: string
      status:
        type: string
        enum: [empty, deploying, ready, error]
      driveType:
        type: string
        enum: [nvme, ssd, hdd, archive]
      slaveNodes:
        type: boolean
        description: Do we need to have slave backup nodes or no
      nodes:
        type: string[]
        description: List of node ID on which storage server are deployed for this cluster
      dataStorage:
        type: StorageServer[]
        description: List of data storage server in the cluster
      metadataStorage:
        type: StorageServer[]
        description: List of metadata storage server in the cluster
  
  # Volumes API
  VolumeCreate:
    properties:
      size:
        type: integer
        description: Size of the volume in GiB
      blocksize:
        type: integer
        description: blocksize in bytes
        default: 4096
      deduped:
        type: boolean
        default: true
      templatevolume:
        type: string
        required: false
      readOnly:
        type: boolean
        required: false
        default: false
      driver:
        type: string
        description: name of the driver of this volume
        required: false
  
  Volume:
    properties:
      id: string
      status:
        enum: [running, halted, rollingback]
        description: Status of the volume
      size:
        type: integer
        description: Size of the volume in GiB
      blocksize:
        type: integer
        description: blocksize in bytes
        default: 4096
      deduped:
        type: boolean
        description: Indicates if this volume is deduped or not.
      readOnly:
        type: boolean
        default: false
        required: false
      driver:
        type: string
        description: name of the driver of this volume
        required: false
  
  VolumeResize:
    properties:
      newSize:
        type: integer
        description: New size in Gib, need to be bigger then the current size.
  
  VolumeRollback:
    properties:
      epoch:
        type: integer
        description: Epoch to which we want to rollback the volume


/node:
  get:
    (AYSBased):
    description: List Nodes
    displayName: ListNodes
    responses:
      200:
        body:
          application/json:
            type: Node[]
  /{nodeid}:
    get:
      (AYSBased):
      description: Get detailed information of a node
      displayName: GetNode
      responses:
        200:
          body:
            application/json:
              type: Node
    /job:
      description: Jobs for this Node
      get:
        (DirectAccess):
        displayName: ListNodeJobs
        description: List running jobs
        responses:
          200:
            body:
              application/json:
                type: JobListItem[]
      delete:
        (DirectAccess):
        displayName: KillAllNodeJobs
        description: Kills all running jobs
        responses:
          204:
            description: Jobs killed successfully
      /{jobid}:
        get:
          (DirectAccess):
          displayName: GetNodeJob
          description: Get the details of a submitted job
          responses:
            200:
              body:
                application/json:
                  type: JobResult
        delete:
          (DirectAccess):
          displayName: KillNodeJob
          description: Kills the job
          responses:
            204:
              description: Jobs killed successfully
    /ping:
      post:
        (DirectAccess):
        displayName: PingNode
        description: Ping this node
        responses:
          200:
            body:
              application/json:
                description: Returns true when the g8os responds
                type: boolean
    /state:
      get:
        (DirectAccess):
        displayName: GetNodeState
        description: The aggregated consumption of node + all processes (cpu, memory, etc...)
        responses:
          200:
            body:
              application/json:
                type:
                  CoreStateResult
    /reboot:
      post:
        (AYSBased):
        displayName: RebootNode
        description: Immediately reboot the machine.
        responses:
          204:
            description: Machine reboot signal sent successfully
    /cpu:
      get:
        (DirectAccess):
        displayName: GetCPUInfo
        description: Get detailed information of all CPUs in the node
        responses:
          200:
            body:
              application/json:
                type: CPUInfo[]
    /disk:
      get:
        (DirectAccess):
        displayName: GetDiskInfo
        description: Get detailed information of all the disks in the node
        responses:
          200:
            body:
              application/json:
                type: DiskInfo[]
    /mem:
      get:
        (DirectAccess):
        displayName: GetMemInfo
        description: Get detailed information about the memory in the node
        responses:
          200:
            body:
              application/json:
                type: MemInfo
    /nic:
      get:
        (DirectAccess):
        displayName: GetNicInfo
        description: Get detailed information about the network interfaces in the node
        responses:
          200:
            body:
              application/json:
                type: NicInfo[]
    /info:
      get:
        (DirectAccess):
        displayName: GetNodeOSInfo
        description: Get detailed information of the os of the node
        responses:
          200:
            body:
              application/json:
                type: OSInfo
    /process:
       get:
         (DirectAccess):
         displayName: ListNodeProcesses
         description: Get Processes
         responses:
           200:
             body:
               application/json:
                 type: Process[]
       /{proccessid}:
         get:
           (DirectAccess):
           displayName: GetNodeProcess
           description: Get process details
           responses:
             200:
               body:
                 application/json:
                   type: Process
         delete:
           (DirectAccess):
           displayName: KillNodeProcess
           description: Kill Process
           responses:
             204:
               description: Job killed successfully
    /bridge:
      post:
        (AYSBased):
        displayName: CreateBridge
        description: Creates a new bridge
        body:
          application/json:
            type: BridgeCreate
        responses:
          201:
            description: Bridge created successfully
            headers:
              Location:
                description: Url to the created bridge resource
      get:
        (AYSBased):
        displayName: ListBridges
        description: List bridges
        responses:
          200:
            body:
              application/json:
                type: Bridge[]
      /{bridgeid}:
        get:
          (AYSBased):
          displayName: GetBridge
          description: Get bridge details
          responses:
            200:
              body:
                application/json:
                  type: Bridge
        delete:
          (AYSBased):
          displayName: DeleteBridge
          description: Remove bridge
          responses:
            204:
              description: Bridge removed successfully
    /storagepool:
      get:
        (AYSBased):
        displayName: GetStoragePools
        description: List storage pools present in the node
        responses:
          200:
            body:
              application/json:
                type: StoragePoolListItem[]
      post:
        (AYSBased):
        displayName: CreateStoragePool
        description: Create a new storage pool
        body:
          application/json:
            type: StoragePoolCreate
        responses:
          201:
            headers:
              Location:
                description: Url to the newly created storagepool.
      /{storagepoolname}:
        get:
          (AYSBased):
          displayName: GetStoragePoolInfo
          description: Get detailed information of this storage pool
          responses:
            200:
              body:
                application/json:
                  type: StoragePool
        delete:
          (AYSBased):
          displayName: DeleteStoragePool
          description: Delete the storage pool
          responses:
            204:
              description: Storage pool deleted successfully
        /device:
          get:
            (AYSBased):
            displayName: ListStoragePoolDevices
            description: Lists the devices in the storage pool
            responses:
              200:
                body:
                  application/json:
                    description: List of devices of the storage pool
                    type: StoragePoolDevice[]
          post:
            (AYSBased):
            displayName: CreateStoragePoolDevices
            description: Add extra devices to this storage pool
            body:
              application/json:
                description: List of devices to add to the storage pool
                type: string[]
                example: ['/dev/sdc', '/dev/sdd']
            responses:
              204:
                description: Devices added successfully
          /{deviceuuid}:
            get:
              displayName: GetStoragePoolDeviceInfo
              description: Get information of the device
              responses:
                200:
                  body:
                    application/json:
                      type: StoragePoolDevice
            delete:
              (AYSBased):
              displayName: DeleteStoragePoolDevice
              description: Removes the device from the storagepool
              responses:
                204:
                  description: Removal started successfully
                  headers:
                    Location:
                      description: Url to the storage pool device resource beeing removed
        /filesystem:
          get:
            (AYSBased):
            displayName: ListFilesystems
            description: List filesystems
            responses:
              200:
                body:
                  application/json:
                    description: List of filesystems
                    type: string[]
          post:
            (AYSBased):
            displayName: CreateFilesystem
            description: Create a new filesystem
            body:
              application/json:
                type: FilesystemCreate
            responses:
              201:
                headers:
                  Location:
                    description: Url towards the newly created filesystem resource
          /{filesystemname}:
            get:
              (AYSBased):
              displayName: GetFilesystemInfo
              description: Get detailed filesystem information
              responses:
                200:
                  body:
                    application/json:
                      type: Filesystem
            delete:
              (AYSBased):
              displayName: DeleteFilesystem
              description: Delete filesystem
              responses:
                204:
                  description: Filesystem deleted successfully
            /snapshot:
              get:
                (AYSBased):
                displayName: ListFilesystemSnapshots
                description: List snapshots of this filesystem
                responses:
                  200:
                    body:
                      application/json:
                        description: List of snapshots
                        type: string[]
              post:
                (AYSBased):
                displayName: CreateSnapshot
                description: Create a new readonly filesystem of the current state of the volume
                body:
                  application/json:
                    description: |
                      Unique identifier for the snapshot
                      Permitted characters: a-z,-
                      Max length: 50 characters.
                    type: string
                responses:
                  201:
                    description: Snapshot created successfully
                    headers:
                      Location:
                        description: Url to the created snapshot resource
              /{snapshotname}:
                get:
                  (AYSBased):
                  displayName: GetFilesystemSnapshotInfo
                  description: Get detailed information on the snapshot
                  responses:
                    200:
                      body:
                        application/json:
                          type: Snapshot
                delete:
                  (AYSBased):
                  displayName: DeleteFilesystemSnapshot
                  description: Delete snapshot
                  responses:
                    204:
                      description: Snapshot deleted successfully
                /rollback:
                  post:
                    (AYSBased):
                    displayName: RollbackFilesystemSnapshot
                    description: Rollback the filesystem to the state at the moment the snapshot was taken
                    responses:
                      204:
                        description: Snapshot rollbacked successfully
    /zerotier:
      get:
        (AYSBased):
        displayName: ListZerotier
        description: List running Zerotier networks
        responses:
          200:
            body:
              application/json:
                type: ZerotierListItem[]
      post:
        (AYSBased):
        displayName: JoinZerotier
        description: Join Zerotier network
        body:
          application/json:
            type: ZerotierJoin
        responses:
          201:
            description: Zerotier network joined successfully
            headers:
              Location:
                description: Url to the created zerotier network resource
      /{zerotierid}:
        get:
          (AYSBased):
          displayName: GetZerotier
          description: Get Zerotier network details
          responses:
            200:
              body:
                application/json:
                  type: Zerotier
        delete:
          (AYSBased):
          displayName: ExitZerotier
          description: Exit the Zerotier network
          responses:
            204:
              description: Zerotier network exited successfully
    /container:
      get:
        (AYSBased):
        displayName: ListContainers
        description: List running Containers
        responses:
          200:
            body:
              application/json:
                type: ContainerListItem[]
      post:
        (AYSBased):
        displayName: CreateContainer
        description: Create a new Container
        body:
          application/json:
            type: Container
        responses:
          201:
            description: Container created successfully
            headers:
              Location:
                description: Url to the created container resource
      /{containerid}:
        delete:
          (AYSBased):
          displayName: DeleteContainer
          description: Delete Container instance
          responses:
            204:
              description: Container deleted successfully
        get:
          (AYSBased):
          displayName: GetContainer
          description: Get Container
          responses:
            200:
              body:
                application/json:
                  type: Container
        /filesystem:
          post:
            (DirectAccess):
            description: Upload file to container
            displayName: FileUpload
            queryString:
              properties:
                path: string
            body:
              multipart/form-data:
                properties:
                  file:
                    type: file
                    required: true
                    description: the file to upload
            responses:
              204:
                description: File uploaded successfully
          get:
            (DirectAccess):
            description: Download file from container
            displayName: FileDownload
            queryString:
              properties:
                path: string
            responses:
              200:
                body:
                  application/octet-stream:
          delete:
            (DirectAccess):
            description: Delete file from container
            displayName: FileDelete
            body:
              application/json:
                type: DeleteFile
            responses:
              204:
                description: File deleted successfully
        /job:
          get:
            (DirectAccess):
            displayName: ListContainerJobs
            description: List running jobs on the container
            responses:
              200:
                body:
                  application/json:
                    type: JobListItem[]
          delete:
            (DirectAccess):
            displayName: KillAllContainerJobs
            description: Kills all running jobs on the container
            responses:
              204:
                description: Jobs killed successfully
          post:
            (DirectAccess):
            displayName: SendSignalJob
            description: Send signal to the job
            body:
              application/json:
                type: ProcessSignal
          /{jobid}:
            get:
              (DirectAccess):
              displayName: GetContainerJob
              description: Get details of a submitted job on the container
              responses:
                200:
                  body:
                    application/json:
                      type: JobResult
            delete:
              (DirectAccess):
              displayName: KillContainerJob
              description: Kills the job
              responses:
                204:
                  description: Job killed successfully
        /ping:
          post:
            (DirectAccess):
            displayName: PingContainer
            description: Ping this container
            responses:
              200:
                body:
                  application/json:
                    type: boolean
        /state:
          get:
            (DirectAccess):
            displayName: GetContainerState
            description: The aggregated consumption of container + all processes (cpu, memory, etc...)
            responses:
              200:
                body:
                  application/json:
                    type:
                      CoreStateResult
        /info:
          get:
            (DirectAccess):
            displayName: GetContainerOSInfo
            description: Get detailed information of the container os
            responses:
              200:
                body:
                  application/json:
                    type: OSInfo
        /process:
           get:
             (DirectAccess):
             displayName: ListContainerProcesses
             description: Get running processes in this container
             responses:
               200:
                 body:
                   application/json:
                     type: Process[]
           post:
             (DirectAccess):
             displayName: StartContainerProcess
             description: Start a new process in this container
             body:
               application/json:
                 type: CoreSystem
             responses:
               202:
                 headers:
                   Location:
                     description: Url to the job object handling this request
           /{proccessid}:
             get:
               (DirectAccess):
               displayName: GetContainerProcess
               description: Get process details
               responses:
                 200:
                   body:
                     application/json:
                       type: Process
             delete:
               (DirectAccess):
               displayName: KillContainerProcess
               description: Kill Process
               responses:
                 204:
                   description: Process killed successfully
             post:
               (DirectAccess):
               displayName: SendSignalProcess
               description: Send signal to the process
               body:
                 application/json:
                   type: ProcessSignal
    /vm:
      get:
        (AYSBased):
        description: List VMs
        displayName: ListVMs
        responses:
          200:
            body:
              application/json:
                type: VMListItem[]
      post:
        (AYSBased):
        description: Creates the VM
        displayName: CreateVM
        body:
          application/json:
            type: VMCreate
        responses:
          200:
            body:
              application/json:
                description: Runtime id of the virtual machine (process id)
                type: integer
      /{vmid}:
        delete:
          (AYSBased):
          displayName: DeleteVM
          description: Deletes the VM
          responses:
            204:
              description: VM stopped successfully
        get:
          (AYSBased):
          displayName: GetVM
          description: Get detailed virtual machine object
          responses:
            200:
              body:
                application/json:
                  type: VM
        /info:
          get:
            (DirectAccess):
            displayName: GetVMInfo
            description: Get statistical information about the virtual machine.
            responses:
              200:
                body:
                  application/json:
                    type: VMInfo
        /start:
          post:
            (AYSBased):
            displayName: StartVM
            description: Starts the VM
            responses:
              204:
                description: VM Started successfully
        /stop:
          post:
            (AYSBased):
            displayName: StopVM
            description: Stops the VM
            responses:
              204:
                description: VM Stopped successfully
        /pause:
          post:
            (AYSBased):
            displayName: PauseVM
            description: Pauses the VM
            responses:
              204:
                description: VM Paused successfully
        /resume:
          post:
            (AYSBased):
            displayName: ResumeVM
            description: Resumes the VM
            responses:
              204:
                description: VM Resumed successfully
        /shutdown:
          post:
            (AYSBased):
            displayName: ShutdownVM
            description: Gracefully shutdown the VM
            responses:
              204:
                description: VM shutdown request passed successfully
        /migrate:
          post:
            (AYSBased):
            displayName: MigrateVM
            description: Migrate the VM to another host
            body:
              application/json:
                type: VMMigrate
            responses:
              204:
                description: VM migration request passed successfully
/storagecluster:
  description: Creates and get informations about a storage cluster
  post:
    (AYSBased):
    displayName: DeployNewCluster
    description: Deploy New Cluster
    body:
      application/json:
        type: ClusterCreate
    responses:
      201:
        description: Deployment started
        headers:
          Location:
            description: Url to newly created storage cluster resource
  get:
    (AYSBased):
    displayName: ListAllClusters
    description: List all running clusters
    responses:
      200:
        body:
          application/json:
            type: string[]
  /{label}:
    get:
      (AYSBased):
      displayName: GetClusterInfo
      description: Get full Information about specific cluster
      responses:
        200:
          body:
            application/json:
              type: Cluster
    delete:
      (AYSBased):
      displayName: KillCluster
      description: Kill cluster
      responses:
        204:
          description: Cluster destroyed
    /volumes:
      post:
        (AYSBased):
        displayName: CreateNewVolume
        description: Create a new volume, can be a copy from an existing volume
        body:
          application/json:
            type: VolumeCreate
        responses:
          201:
            headers:
              Location:
                description: Url to the created volume resource
          404:
            description: The template volume or storagecluster do not exist
      /{volumeid}:
        get:
          (AYSBased):
          displayName: GetVolumeInfo
          description: Get volume information
          responses:
            200:
              body:
                application/json:
                  type: Volume
            404:
              description: The volume does not exist
        delete:
          (AYSBased):
          displayName: DeleteVolume
          description: Delete Volume
          responses:
            204:
              description: Deleted
            404:
              description: The volume does not exist
        /resize:
          post:
            (AYSBased):
            displayName: ResizeVolume
            description: Resize Volume
            body:
              application/json:
                type: VolumeResize
            responses:
              204:
                description: Volume Resized
        /rollback:
          post:
            (AYSBased):
            displayName: RollbackVolume
            description: Rollback a volume to a previous state
            body:
              application/json:
                type: VolumeRollback
            responses:
              204:
                description: Rollback started successfully
